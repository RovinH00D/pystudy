'''
    클래스는 흔히 객체 지향 프로그램 언어에서 많이들 제공하는 기술 중 하나이다.
    보게 되면, C언어의 구조체와 비슷한 점이 많아보인다고 생각이 들 것이다.
    그렇다면 클래스의 구조를 아래 예시로 살펴보자

    class Calculator:
        def __init__(self):
            self.result = 0
        def adder(self,num):
            self.result += num
            return self.result

    cal1 = Calculator()
    cal2 = Calculator()

    print(cal1.adder(3))
    print(cal1.adder(4))
    print(cal2.adder(3))
    print(cal2.adder(7))

    이것은 클래스를 응용한 계산기 프로그램이다. 가벼운 더하기 능력만 있고,
    이전에 계산한 값에 접근하여 그 값에 더하기를 하는 프로그램이다.

    일단 이해를 위해서 구조체와 클래스의 공통점과 다른 점을 살펴보자.

    먼저, 공통점이다.
    클래스와 구조체는 모두 하나의 공간에 만들어져있고, 그 이름을 가져오기 전까지 실존하는 값들이 아니다.
    C언어의 경우 main함수로 가져와 선언을 해야만 사용이 가능하고,
    파이썬의 경우 어떤 변수에 대입을 하여 불러오지 않으면 사용이 불가능하다.

    또한, 클래스와 구조체 내에서 각각의 변수가 선언이 가능하다는 것도 공통점이다.

    그렇다면 차이점은 무엇일까?
    클래스와 구조체의 차이점은 함수의 선언이다.
    위의 클래스 예제를 보면 알겠지만, 클래스 내부에서 함수를 선언한다.
    그러나 C언어의 구조체는 구조체 내부에서 함수를 선언하지 않는 대신 다른 함수를 만들고,
    그 내부에서 구조체를 사용하거나, 함수의 타입을 선언할 때 사용하기도 한다.
'''

'''
    파이썬에서 클래스 함수는 메서드(method)라고도 불린다. (위의 예시에서는 adder메서드가 있다고 할 수 있다.)
    위에서 클래스의 예시를 봐서 눈치를 챘겠지만, 클래스의 선언은 다음과 같이 한다.


    class 클래스의 이름 :
        클래스 변수 1
        클래스 변수 2
        def 메서드 1 (self, 인수):
            수행할 문장
        def 메서드 2 (self, 인수):
            수행할 문장
'''

'''
    클래스의 구조가 이렇다는 것을 알았으니, 클래스의 문법을 알아보자.
    먼저, 클래스 변수의 선언이다. 아래의 예와 함께보자.

    class Service:
        secret = "영구는 외계인이다."
        def __init__(self, name):
            self.name = name
        def sum(self, a, b):
            result = a + b
            print("%s님 %s + %s = %s입니다." % (self.name, a, b, result))

    클래스를 선언한 모습을 보면 후 곧바로
    secret = '영구는 외계인이다.'
    라고 선언이 되어 있는 것을 볼 수 있다.
    이는 클래스 변수를 문자열으로 선언을 한 것인데,
    클래스 내부에서 평범한 변수를 선언하듯이 선언하면 된다.

    다음으로는 메서드이다. 위의 예제에서 def sum이라고 써있는 것을 볼 수 있다.
    평범하게 함수선언을 클래스 내부에서 한 것이다.
    이처럼 클래스 내부에서 함수를 선언한 클래스 함수를 메서드라고 부른다.

    메서드의 인수를 잘 살펴보면 'self'라고 써져 있는 것을 볼 수 있는데,
    파이썬은 특이하게도 자기자신의 객체를 인수로 사용해야 한다.
    때문에 self를 이용하여 자기자신을 불러 들이는 것이다.
    위의 클래스를 직접 사용해보자
    pey = Service('홍길동')
    pey sum(1,1)
    을 추가하여 에디터에서 실행을 하면,
    성공적으로 프로그램이 실행될 것이다.
    이처럼 self 인수부분에 굳이 인수를 넣어줄 필요가 없다.

    다음으로 눈길이 가는 것은 __init__일텐데,
    이것은 클래스의 객체를 실행할 때 곧바로 같이 실행이 된다 이다.
    위의
        pey = Service('홍길동')
        pey sum(1,1)
    부분에서 객체 초기화와 동시에 '홍길동'이라고 써넣은 이유가 바로 그것이다.
    이 __init__을 사용하면, 객체 초기화와 동시에 사용을 해야만 하므로,
    이때 같이 그 값을 넣지 않으면 에러가 발생한다.

'''

'''
    연산자 오버로딩이 가능하다!
    연산자 오버로딩이란 연산자를 객체끼리 사용하게 해주는 기법으로,
    cl1.Iclass
    cl2.Uclass
    cl1+cal2
    를통해 원하는 값을 나오게 할 수 있다는 것이다.

    __add__의 경우 +연산자를
    __sub__의 경우 -연산자를 사용하는등 약어를 이용하는듯하다.
'''
