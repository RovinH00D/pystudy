# chr() => char
# int() => int int(a, b) -> a를 b진수로 바꾸어줌
# str() => str(arr)
# hex() => 16진수 변환
# id() => 객체 주소값 반환
'''
    lambda함수
    람다라고 읽고, 보통 함수를 한 줄로 간결하게 만들 때 사용한다.

    lambda 인수1, 인수2...: 인수를 이용한 표현식

    lambda를 통해 덧셈을 나타내면 다음과 같다
    lambda a, b : a+b
    lambda는 def를 사용할 수 없는 상황에서도 사용이 가능하기 때문에 나타났다.
    예를 들어 lambda는 리스트 내에서 선언할 수 있고, 각각의 인수를 통해 실행할 수 있다.
    예를 들면 다음과 같다
    funclist[lambda a,b : a+b, lambda a,b : a-b]
    funclist[1](6-2)
     4
    파이썬에 익숙해질수록 lambda함수가 굉장히 용이하게 쓰인다.
'''
# len => strlen() 입력값의 길이 리턴
'''
    map(f, iterable)은 함수(f)와 반복 가능한(iterable) 자료형을 입력으로 받는다.
    map은 입력받은 자료형의 각 요소가 함수f에 의해 실행된 결과를 묶어서 리턴하는 함수이다.
    확인을 하고 싶다면 다음 예제를 실행해보자
    def addone(n) :
        return n+1
    print(list(map(addone, [1,2,3,4,5])))
    #list는 반복가능한 자료형을 입력받아 리스트로 만들어준다
'''
# oct => 8진수로 변환
'''
    파일 개방모드는 w, r, a, b로
    바이너리 모드는 wb, rb, ab로 만들어낸다
'''
# pow(a,b)는 a의 b제곱을 리턴한다
'''
    range는 입력받은 숫자에 해당되는 범위의 값을 반복가능한 객체로 만들어 리턴한다.
    range(5) 처럼 시작 숫자를 지정하지 않으면 0부터 시작하고
    range(1,11)처럼 2개의 인수를 입력하면 그만큼 범위를 조절한다
    range(1,10,2)처럼 3개의 인수를 입력할경우 마지막 인수가 숫자사이의 거리를 조절해준다.
'''
# sorted() => 입력값을 정렬하고 그 결과값을 리스트로 리턴한다. sort와는 달리 리턴값이 있다.
# type() => 자료형이 무엇인지 알려준다.
