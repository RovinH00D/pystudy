'''
    사용자의 함수를 만들고 싶을 때는 다음과 같은 문법을 이용하면 된다

    def 함수 이름(인수) :
        수행할 문장

    함수는 인수와 리턴값에 따라 종류가 나뉜다

    일반적인 함수는
    def sum(a,b) :
        result = a+b
        return result
    처럼 인수와 리턴값이 모두 있는 경우를 말한다

    인수가 없는 함수의 경우는
    def say() :
        return 'Hello, World'
    처럼 리턴값만 존재하는 경우이다 위의 함수를 실행하면
    print (say)  # Hello, World
    이러한 함수는 보통 결과값을 받을 변수 = 함수명()와 같은 꼴로 이용이 된다

    리턴값이 없는 함수의 경우는
    def sum(a,b) :
        print("%d+%d=%d" %(a,b,a+b))
    와 같은 모양으로 선언된다.
    이러한 함수는 리턴값이 없으므로 print문으로 실행을 시켜보면
    None이라는 값이 출력된다. 리턴값이 없으므로 거짓이 되는 것이기 때문

    인수와 리턴값이 둘 다 없는 경우도 존재한다.
    def say() :
        print("Hello, World")
    인수도, 리턴값도 없으니 이것은 둘 다 없는 함수이다.

    참고로 return은 특정한 상황에서 함수를 빠져나가고 싶을 때
    단독으로 이용하여 함수를 빠져나갈 수 있다.
'''

'''
    인수의 개수가 얼마인지 모르는 경우가 있을 수도 있다.
    이럴때는 인수앞에 *을 붙여주는 방법을 취하면 된다.
    예를 들어보자

    def sumf(*args) :
        sum = 0
        for i in args:
            sum = sum + i
        return sum

    위와 같이 '*인수명' 을 사용하면 입력값을 모두 모아 튜플로 만들어주기 때문이다

'''

'''
    def say_myself(name, old, man=True):
        print("나의 이름은  %s입니다." % name)
        print("나이는 %d살입니다." % old)
        if man:
            print("성별은 남자입니다.")
        else :
            print("성별은 여자입니다.")

    위의 코드에서 첫번째 줄을 살펴보자.
    세번째 인수에서 man=True라고 인수를 넣어뒀는데,
    이것은 함수의 인수 초기값을 설정하는 방법이다.
    함수의 입력에서 값이 항상 바뀌는 것이 아니라면 이렇게 초기값을 미리 설정해두면 좋다

    초기값을 설정하고 함수를
    say_myself('김찬', 17)
    처럼 실행했을 때 초기값으로 이미 true가 설정되어 있기 때문에 true를 갖게 된다.

    단, 초기값을 설정해둔 입력인수 뒤에
    초기값을 설정해두지 않은 입력인수를 사용하면 오류를 범하게 된다.
'''

'''
    C언어에서 배웠지만, 함수 밖에서 선언한 변수를
    평범하게 void함수만으로는 그 값을 변경할 수 없음을 알고 있을 것이다.
    이는 파이썬에서도 마찬가지 인데,
    이번에는 함수 안에서 함수 밖의 변수를 변경하는 법을 알아보자

    첫 번째로는 return을 이용하는 것이다. 예를 들어보자
    a = 1
    def vartest(a) :
        a=a+1
        return a
    a = vartest(a)
    print(a)

    위와 같은 방법을 이용하면 5행에서 a의 값을 바꿔 1이었던 a를
    함수 내부의 a인 2로 바꿔준다.

    두 번째 방법으로는 global명령어를 이용하는 것이다.
    a = 1
    def vartest() :
        global a
        a=a+1
    vartest()
    print(a)

    위의 global명령어는 함수 바깥의 변수를 직접 사용하겠다는 명령어이다.
    위의 예제에서 사용한 global a는 a라는 변수를 함수 내부에서 직접 사용하겠다는 의미이다.
    그러나 프로그래밍에서 global은 그다지 좋은 선택지가 아니다.
    왜냐하면 함수는 독립적으로 이용하는 편이 더 좋기 때문이다.
    외부변수에 종속적인 함수는 그다지 좋은 함수가 아니다.
    가급적이면 global의 사용을 피하고 return을 이용하자.
'''
